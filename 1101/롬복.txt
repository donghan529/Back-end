롬복(Lombok) - 자바언어 라이브러리
1. 반복적인 코드 축약
2. java빈(POJO), 데이터객체, 동일성 및 해시코드 메서드 생성
3. 코드의 가독성 향상

롬복 기능
1. @Getter @Setter: 게터 세터 메서드생성
2. @ToString
3. @@EqualsAndHashCode: equals() 및 hashCode() 메서드를 자동으로 생성합니다.
4. @AllArgsConstructor(일반생성자)
    @NonArgsConstructor(기본생성자)
    @RequiredArgsConstructor
'final'로 선언된 필드들을 인자로 받는 생성자가 생성
5. @Builder: 빌더패턴을 사용한 객체 생성
6. @Data 
@ToString, @EqualsAndHashCode, @Getter, @Setter, @RequiredArgsConstructor를 포함한 모든 것을 자동으로 생성합니다.

롬복설치
- 롬복 라이브러리에 추가
firstproject/build.gradle
- 플러그인 설치
shift shift plugins 검색
lombok 검색 -> 설치

로깅(logging)은 System.out.println보다 더 권장되는 이유가 몇 가지 있습니다:

레벨 및 형식 설정: 로깅 프레임워크를 사용하면 로그 메시지의 레벨(예: 디버그, 정보, 경고, 오류)을 설정할 수 있습니다. 이를 통해 로그 메시지의 중요도에 따라 다르게 다룰 수 있으며, 필요한 경우 특정 레벨 이상의 메시지만 표시하도록 구성할 수 있습니다. 또한 로그 메시지의 형식을 사용자 정의할 수 있어서 시간, 로거 이름, 스레드 정보 등을 추가로 기록할 수 있습니다.

실시간 모니터링: 로깅 프레임워크는 로그 메시지를 실시간으로 모니터링하는 도구와 통합할 수 있습니다. 이를 통해 애플리케이션의 상태를 실시간으로 확인하고 문제를 신속하게 식별할 수 있습니다.

로그 파일 관리: 로깅은 로그 파일로 출력하는 것이 일반적이며, 이러한 로그 파일은 일별, 주별, 월별 등으로 관리하거나 크기가 일정 이상이면 자동으로 백업 및 롤링될 수 있습니다. 이를 통해 로그 파일이 너무 커지는 것을 방지하고 로그 이력을 장기간 저장할 수 있습니다.

성능 및 확장성: 로깅 프레임워크는 성능을 최적화하기 위해 여러 가지 기법을 사용하며, 필요한 경우 로그 메시지를 비동기적으로 처리하도록 구성할 수 있습니다. 이로써 애플리케이션의 성능에 부담을 주지 않고 로깅을 수행할 수 있습니다.

유지보수 및 디버깅: 로그 메시지는 애플리케이션 실행 중의 상태와 동작을 기록하므로 애플리케이션의 동작과 문제점을 추적하고 디버깅하는 데 유용합니다. 디버깅을 위해 일시적으로 System.out.println을 추가하고 나중에 제거하는 대신 로그 레벨을 조절하여 필요할 때만 로그를 확인할 수 있습니다.

다양한 출력 대상: 로깅 프레임워크는 콘솔 출력 외에도 파일, 데이터베이스, 원격 서버, 이메일 등 다양한 출력 대상으로 로그를 전송할 수 있습니다.

외부 설정 및 변경: 로깅 설정은 애플리케이션을 재배포하지 않고 외부에서 변경할 수 있습니다. 이는 운영 환경에서 로깅 설정을 변경할 때 유용합니다.

종합하면, 로깅 프레임워크는 애플리케이션의 로그 관리, 디버깅, 모니터링, 유지보수 등 다양한 측면에서 훨씬 효율적이고 강력합니다. 이러한 이유로 System.out.println을 대체하고 로깅 프레임워크를 사용하는 것이 권장됩니다.

----------------------------------------------------------------------
| 숙제								   |
| java lombok 사용법						   |
| 리팩터링이란							   |
| 로깅이란								   |
| @AllArgsConstructor						   |
| @ToString							   |
| @Slf4j								   |
----------------------------------------------------------------------